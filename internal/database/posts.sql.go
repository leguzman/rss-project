// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (id, created_at, updated_at, title, description, published_at, url, feed_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, created_at, updated_at, title, description, published_at, url, feed_id
`

type CreatePostParams struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Description sql.NullString
	PublishedAt time.Time
	Url         string
	FeedID      uuid.UUID
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Description,
		arg.PublishedAt,
		arg.Url,
		arg.FeedID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.PublishedAt,
		&i.Url,
		&i.FeedID,
	)
	return i, err
}

const filterUserPosts = `-- name: FilterUserPosts :many
SELECT posts.id, posts.created_at, posts.updated_at, posts.title, posts.description, posts.published_at, posts.url, posts.feed_id FROM posts
JOIN feed_follows ON feed_follows.feed_id = posts.feed_id
WHERE feed_follows.user_id=$1
AND ($4::text = '' OR posts.title ILIKE '%' || $4 || '%')
AND ($5::text = '' OR posts.description ILIKE '%' || $5 || '%')
AND ($6::TIMESTAMP = '0001-01-01' OR posts.published_at <= $6 )
AND ($7::TIMESTAMP = '0001-01-01' OR posts.published_at >= $7 )
ORDER BY
  CASE WHEN $8::bool THEN posts.title END asc,
  CASE WHEN $9::bool THEN posts.title END desc,
  CASE WHEN $10::bool THEN posts.description END desc,
  CASE WHEN $11::bool THEN posts.description END asc
LIMIT $2
OFFSET $3
`

type FilterUserPostsParams struct {
	UserID          uuid.UUID
	Limit           int32
	Offset          int32
	Title           string
	Description     string
	Before          time.Time
	After           time.Time
	TitleAsc        bool
	TitleDesc       bool
	DescriptionDesc bool
	DescriptionAsc  bool
}

func (q *Queries) FilterUserPosts(ctx context.Context, arg FilterUserPostsParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, filterUserPosts,
		arg.UserID,
		arg.Limit,
		arg.Offset,
		arg.Title,
		arg.Description,
		arg.Before,
		arg.After,
		arg.TitleAsc,
		arg.TitleDesc,
		arg.DescriptionDesc,
		arg.DescriptionAsc,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.PublishedAt,
			&i.Url,
			&i.FeedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserPosts = `-- name: GetUserPosts :many
SELECT posts.id, posts.created_at, posts.updated_at, posts.title, posts.description, posts.published_at, posts.url, posts.feed_id FROM posts
JOIN feed_follows ON feed_follows.feed_id = posts.feed_id
WHERE feed_follows.user_id=$1
ORDER BY posts.published_at
LIMIT $2
`

type GetUserPostsParams struct {
	UserID uuid.UUID
	Limit  int32
}

func (q *Queries) GetUserPosts(ctx context.Context, arg GetUserPostsParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getUserPosts, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.PublishedAt,
			&i.Url,
			&i.FeedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
